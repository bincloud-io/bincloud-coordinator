/
CREATE FUNCTION `LS_ALLOC_SPACE`(`REQ_DISTRIBUTION_POINT` VARCHAR(16), `REQ_MEDIA_TYPE` VARCHAR(128), `REQ_STORAGE_FILE_NAME` VARCHAR(64), `REQ_ALLOC_SIZE` BIGINT(20)) RETURNS VARCHAR(16)
BEGIN
	DECLARE `HISTORY_MARKER` VARCHAR(36) DEFAULT UUID();
	DECLARE `RS_STORAGE_NAME` VARCHAR(16) DEFAULT NULL;
	INSERT INTO `SPACE_ALLOCATIONS_HISTORY`(`GUID`, `STORAGE_FILE_NAME`, `DISTRIBUTION_POINT_NAME`, `STORAGE_NAME`, `OPERATION_TYPE`, `SIZE`)
	WITH
		`V_STORAGE` AS (
			SELECT
				`S`.`STORAGE_NAME`,
				`LS`.`DISTRIBUTION_POINT_NAME`,
				`LS`.`DISK_QUOTE` - SUM(CASE
					WHEN `H`.`OPERATION_TYPE` = 'ALLOC' THEN `H`.`SIZE`
					ELSE 0
				END) + SUM(CASE
					WHEN `H`.`OPERATION_TYPE` = 'RELEASE' THEN `R`.`SIZE`
					ELSE 0
				END) AS `AVAILABLE_SPACE`
			FROM 
				`REF_STORAGES` `S` 
			INNER JOIN 
				`REF_LOCAL_STORAGES` `LS` ON 
					`LS`.`STORAGE_NAME` = `S`.`STORAGE_NAME`
			LEFT JOIN 
				`SPACE_ALLOCATIONS_HISTORY` `H` ON
					`H`.`STORAGE_NAME` = `LS`.`STORAGE_NAME`
			LEFT JOIN
				`SPACE_ALLOCATIONS_HISTORY` `R` ON
					`H`.`ALLOCATION_REF_ID` = `R`.`ID`
			WHERE
				`S`.`MEDIA_TYPE` = `REQ_MEDIA_TYPE`
				AND `LS`.`DISTRIBUTION_POINT_NAME` = `REQ_DISTRIBUTION_POINT`
			GROUP BY `STORAGE_NAME`
			HAVING	
				`AVAILABLE_SPACE` >= `REQ_ALLOC_SIZE`
			ORDER BY `AVAILABLE_SPACE`
			LIMIT 1
		)
	SELECT 
		`HISTORY_MARKER` AS `GUID`,
		`REQ_STORAGE_FILE_NAME` as `STORAGE_FILE_NAME`,
		`S`.`DISTRIBUTION_POINT_NAME`,
		`S`.`STORAGE_NAME`,
		'ALLOC' as `OPERATION_TYPE`,
		`REQ_ALLOC_SIZE` as `SIZE`
	FROM `V_STORAGE` `S`;

	SELECT 
		`H`.`STORAGE_NAME` INTO `RS_STORAGE_NAME`
	FROM 
		`SPACE_ALLOCATIONS_HISTORY` `H`
	WHERE
		`H`.`ID` = LAST_INSERT_ID()
		AND `H`.`GUID` = `HISTORY_MARKER`
		AND `H`.`OPERATION_TYPE` = 'ALLOC'
		AND `H`.`DISTRIBUTION_POINT_NAME` = `REQ_DISTRIBUTION_POINT`;

	RETURN (`RS_STORAGE_NAME`);
END
/
CREATE FUNCTION `LS_RELEASE_SPACE`(`REQ_DISTRIBUTION_POINT` VARCHAR(16), `REQ_STORAGE_NAME` VARCHAR(16), `REQ_STORAGE_FILE_NAME` VARCHAR(64)) RETURNS TINYINT(1)
BEGIN
	DECLARE `HISTORY_MARKER` VARCHAR(36) DEFAULT UUID();
	DECLARE `RS_SUCCEED` TINYINT(1) DEFAULT 0;
	INSERT INTO `SPACE_ALLOCATIONS_HISTORY`(`GUID`, `STORAGE_FILE_NAME`, `DISTRIBUTION_POINT_NAME`, `STORAGE_NAME`, `OPERATION_TYPE`, `ALLOCATION_REF_ID`)
	SELECT 
		`HISTORY_MARKER` AS `GUID`,
		`H`.`STORAGE_FILE_NAME`,
		`H`.`DISTRIBUTION_POINT_NAME`,
		`H`.`STORAGE_NAME`,
		'RELEASE' AS `OPERATION_TYPE`,
		`H`.`ID` AS `ALLOCATION_REF_ID` 
	FROM `SPACE_ALLOCATIONS_HISTORY` `H`
	LEFT JOIN `SPACE_ALLOCATIONS_HISTORY` `R` ON
		`H`.`ID` = `R`.`ALLOCATION_REF_ID`
	WHERE
		`R`.`ID` IS NULL
		AND `H`.`OPERATION_TYPE` = 'ALLOC'
		AND `H`.`STORAGE_NAME` = `REQ_STORAGE_NAME`
		AND `H`.`STORAGE_FILE_NAME` = `REQ_STORAGE_FILE_NAME`
		AND `H`.`DISTRIBUTION_POINT_NAME` = `REQ_DISTRIBUTION_POINT` 
	ORDER BY 
		`H`.`ID` DESC
	LIMIT 1;

	SELECT 
		COUNT(*) > 0 INTO `RS_SUCCEED`
	FROM 
		`SPACE_ALLOCATIONS_HISTORY` `H`
	WHERE
		`H`.`ID` = LAST_INSERT_ID()
		AND `H`.`GUID` = HISTORY_MARKER
		AND `H`.`OPERATION_TYPE` = 'RELEASE'
		AND `H`.`DISTRIBUTION_POINT_NAME` = `REQ_DISTRIBUTION_POINT`;
	
	RETURN (`RS_SUCCEED`);
END
/
